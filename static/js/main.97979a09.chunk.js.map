{"version":3,"sources":["Components/search-box/SearchBox.js","Components/card/card.js","Components/card-list/CardList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","onSearchChange","className","type","placeholder","onChange","Card","props","style","width","height","src","movie","poster_path","alt","original_title","popularity","CardList","movies","length","map","index","key","App","state","searchField","SearchChange","bind","fetch","then","response","json","user","setState","results","catch","e","console","log","message","this","target","value","filteredResults","filter","toLowerCase","includes","fontFamily","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"iWAGaA,G,YAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC1B,OACE,6BACE,2BACEC,UAAU,aACVC,KAAK,SACLC,YAAY,oBACZC,SAAUJ,OCPLK,G,YAAO,SAAAC,GAAK,OACvB,yBAAKL,UAAU,kBACb,yBACEM,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAG,yCAAoCJ,EAAMK,MAAMC,aACnDC,IAAKP,EAAMK,MAAMG,iBAEnB,4BAAKR,EAAMK,MAAMG,gBACjB,2CAAiBR,EAAMK,MAAMI,eCPpBC,EAAW,SAAAV,GACtB,OACE,yBAAKL,UAAU,aACZK,EAAMW,OAAOC,OAAS,GACrBZ,EAAMW,OAAOE,KAAI,SAACR,EAAOS,GAAR,OACf,kBAAC,EAAD,CAAMC,IAAKD,EAAOT,MAAOA,SCiCpBW,E,YAnCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXN,OAAQ,GACRO,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANR,E,iFAQO,IAAD,OAClBC,MACE,wFAECC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEf,OAAQc,EAAKE,aAC1CC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAEG,c,mCAEjBH,GACXI,KAAKP,SAAS,CAAER,YAAaW,EAAEK,OAAOC,U,+BAE9B,IAAD,EACyBF,KAAKhB,MAA7BN,EADD,EACCA,OAAQO,EADT,EACSA,YACVkB,EAAkBzB,EAAO0B,QAAO,SAAAhC,GAAK,OACzCA,EAAMG,eAAe8B,cAAcC,SAASrB,EAAYoB,kBAE1D,OACE,yBAAK3C,UAAU,OACb,wBAAIM,MAAO,CAAEuC,WAAY,cAAeC,SAAU,SAAlD,iBAGA,kBAAC,EAAD,CAAW/C,eAAgBuC,KAAKd,eAChC,kBAAC,EAAD,CAAUR,OAAQyB,S,GA/BRM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMzB,c","file":"static/js/main.97979a09.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./search-box.css\";\n\nexport const SearchBox = ({ onSearchChange }) => {\n  return (\n    <div>\n      <input\n        className=\"search-box\"\n        type=\"search\"\n        placeholder=\"Search for Movies\"\n        onChange={onSearchChange}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card.css\";\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    <img\n      style={{ width: \"100%\", height: \"auto\" }}\n      src={`http://image.tmdb.org/t/p/w500/${props.movie.poster_path}`}\n      alt={props.movie.original_title}\n    />\n    <h2>{props.movie.original_title}</h2>\n    <p>Popularity : {props.movie.popularity}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.css\";\nimport { Card } from \"../card/card\";\n\nexport const CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.movies.length > 0 &&\n        props.movies.map((movie, index) => (\n          <Card key={index} movie={movie}></Card>\n        ))}\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { SearchBox } from \"./Components/search-box/SearchBox\";\nimport { CardList } from \"./Components/card-list/CardList\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      searchField: \"\"\n    };\n    this.SearchChange = this.SearchChange.bind(this);\n  }\n  componentDidMount() {\n    fetch(\n      \"https://api.themoviedb.org/3/discover/movie?api_key=15d2ea6d0dc1d476efbca3eba2b9bbfb\"\n    )\n      .then(response => response.json())\n      .then(user => this.setState({ movies: user.results }))\n      .catch(e => console.log(e.message));\n  }\n  SearchChange(e) {\n    this.setState({ searchField: e.target.value });\n  }\n  render() {\n    const { movies, searchField } = this.state;\n    const filteredResults = movies.filter(movie =>\n      movie.original_title.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1 style={{ fontFamily: \"Trade Winds\", fontSize: \"60px\" }}>\n          Latest Movies\n        </h1>\n        <SearchBox onSearchChange={this.SearchChange} />\n        <CardList movies={filteredResults} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}